{"version":3,"sources":["components/Currencies.js","components/SideBar.js","components/Results.js","App.js","serviceWorker.js","index.js"],"names":["Currencies","props","currencyLoop","currencies","map","currency","react_default","a","createElement","key","value","react","SideBar","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","defineProperty","target","name","handleSubmit","preventDefault","convertCurrency","state","from","to","amount","className","onSubmit","onChange","components_Currencies","type","Component","Results","convertedAmount","otherConvertedAmounts","isLoading","othercurrenciesAmountLoop","otherConvertedAmount","moment","format","App","fetchCurrencies","axios","get","then","response","keys","data","rates","catch","error","console","log","concat","entries","rate","toFixed","_this$state","otherConvertedCurrencies","components_SideBar","components_Results","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.afcb9bec.chunk.js","sourcesContent":["import React, { Fragment } from 'react'\r\n\r\nconst Currencies = (props) => {\r\n    const {currencies} = props;\r\n\r\n    const currencyLoop = currencies.map(currency => {\r\n        return <option key={currency} value={currency}>{currency}</option>\r\n    });\r\n    return (\r\n        <Fragment>\r\n            {currencyLoop}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Currencies;\r\n","import React, { Component } from 'react'\r\nimport Currencies from './Currencies';\r\nclass SideBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            from:'USD',\r\n            to:'PHP',\r\n            amount:1.00,\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({[e.target.name]:e.target.value});\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.convertCurrency(this.state.from, this.state.to, this.state.amount);\r\n    }\r\n\r\n    render() {\r\n        const { currencies } = this.props;\r\n\r\n\r\n        return (\r\n            <aside className=\"sidebar\">\r\n                <div className=\"sidebar__heading\">\r\n                    <h3 className=\"sidebar__name\">GIO'S</h3>\r\n                    <h3 className=\"sidebar__appname\">CURRENCY CONVERTER</h3>\r\n                </div>\r\n\r\n                <form className=\"convertForm\" onSubmit={this.handleSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label>From</label>\r\n                        <select name=\"from\" className=\"form-control\" onChange={this.handleChange} value={this.state.from}>\r\n                            <Currencies currencies={currencies} />\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>To</label>\r\n                        <select name=\"to\" className=\"form-control\" onChange={this.handleChange} value={this.state.to}>\r\n                            <Currencies currencies={currencies} />\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Amount</label>\r\n                        <input type=\"number\" name=\"amount\" className=\"form-control\" value={this.state.amount} onChange={this.handleChange}/>\r\n                    </div>\r\n\r\n                    <button type=\"submit\" className=\"convertForm__button\">CONVERT</button>\r\n                </form>\r\n            </aside>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SideBar;\r\n","import React, { Fragment } from 'react'\r\nimport moment from 'moment'\r\n\r\nconst Results = (props) => {\r\n    const {from, to, convertedAmount, otherConvertedAmounts, isLoading } = props;\r\n\r\n    const othercurrenciesAmountLoop = otherConvertedAmounts.map(otherConvertedAmount => {\r\n        return <div className=\"otherConvertedAmount\">{otherConvertedAmount}</div>\r\n    });\r\n\r\n    return (\r\n        <div className=\"results\">\r\n            {isLoading ? <p>Wait the results are loading...</p> :\r\n                <Fragment>\r\n                    <div className=\"main-result\">\r\n                        <p className=\"main-result-heading\">{from} to {to}</p>\r\n                        <p className=\"main-result-amount\">{convertedAmount}</p>\r\n                        <p className=\"main-result-as-of\">as of</p>\r\n                        <p className=\"main-result-currentDate\">{moment().format('DD MMMM YYYY')}</p>\r\n                    </div>\r\n                    <div className=\"otherResults\">\r\n                        {othercurrenciesAmountLoop}\r\n                    </div>\r\n                </Fragment>\r\n            }\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default Results;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport SideBar from './components/SideBar';\r\nimport Results from './components/Results';\r\n// import Footer from './components/Footer';\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currencies:[],\r\n            convertedAmount:'',\r\n            otherConvertedAmounts:[],\r\n            from:'USD',\r\n            to:'PHP',\r\n            isLoading:false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({isLoading:true});\r\n        this.fetchCurrencies();\r\n        this.convertCurrency(this.state.from, this.state.to, 1);\r\n    }\r\n\r\n    fetchCurrencies = () => {\r\n        axios.get('https://api.exchangeratesapi.io/latest')\r\n        .then(response => {\r\n            let currencies = Object.keys(response.data.rates);\r\n            this.setState({currencies:currencies});\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        })\r\n    }\r\n\r\n    convertCurrency = (from, to, amount) => {\r\n        axios.get(`https://api.exchangeratesapi.io/latest?base=${from}`)\r\n        .then(response => {\r\n            let convertedAmount = response.data.rates[to] * amount;\r\n            let otherConvertedAmounts = Object.entries(response.data.rates).map(rate => {\r\n                let otherConvertedAmount = rate[1] * amount\r\n                return `${rate[0]} - ${otherConvertedAmount.toFixed(2)}`;\r\n            })\r\n            this.setState({\r\n                convertedAmount: convertedAmount.toFixed(2),\r\n                otherConvertedAmounts:otherConvertedAmounts,\r\n                from:from,\r\n                to:to,\r\n                isLoading:false\r\n            })\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { currencies, convertedAmount, from, to, otherConvertedCurrencies, otherConvertedAmounts, isLoading} = this.state;\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"currency-converter\">\r\n                    <SideBar currencies={currencies} convertCurrency={this.convertCurrency}/>\r\n                    <Results convertedAmount={convertedAmount} from={from} to={to} otherConvertedAmounts={otherConvertedAmounts} isLoading={isLoading}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}